[tool.poetry]
name = "gendalf"
version = "0.2.0"
description = "A Python codegen tool for transport layers in DDD, supporting most popular transport / API frameworks."
authors = ["zerlok <danil.troshnev@gmail.com>"]
readme = "README.md"
license = "MIT"
keywords = [
    "python",
    "codegen",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Code Generators",
    "Typing :: Typed",
]

[tool.poetry.urls]
Homepage = "https://github.com/zerlok/gendalf"
Issues = "https://github.com/zerlok/gendalf/issues"

[tool.poetry.scripts]
gendalf = "gendalf.cli:cli"

[tool.poetry.dependencies]
python = "^3.9"
click = { version = "^8.1.8", optional = true }
astlab = "^0.4.2"

[tool.poetry.group.dev.dependencies]
mypy = "^1.13.0"
pytest = "^8.3.3"
pytest-cov = "^6.0.0"
ruff = ">=0.7.4,<1"
pytest-asyncio = "^1.1.0"

[tool.poetry.group.examples.dependencies]
httpx = "^0.28.1"
uvicorn = "^0.34.0"
fastapi = "^0.115.7"
httpx-ws = "^0.7.1"
aiohttp = "^3.12.14"

[tool.poetry.extras]
cli = ["click"]
examples = ["uvicorn", "fastapi", "httpx-ws", "aiohttp"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
target-version = "py39"
extend-exclude = ["examples/**/generated"]
force-exclude = true
line-length = 120
output-format = "pylint"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN", # because we use mypy
    "D", # TODO: add docstrings to public code
    "FA", # TODO: consider should we use __annotations__
    "TD", # no task tracking
    "FIX", # TODO: consider enable it against new code on pull requests
    "COM812", # because ruff format suggests to skip it
    "ISC001", # because ruff format suggests to skip it
    "RET505", # clashes with mypy exhaustiveness check
    "S101", # allow asserts for tests checks and mypy help
    # TODO: stop ignore this rule
    "A005", # waiting for fix: https://github.com/astral-sh/ruff/issues/15399#event-16176023176
    # TODO: stop ignore this rule
    "UP007", # because of 3.9 support
    # TODO: stop ignore this rule
    "SIM117", # because ast builder 2.0 uses with statement to build contextual scope statemetns
    "ARG002", # because `ruff` can't handle `override` from internal `gendalf._typing`.
    "UP045", # because of 3.9 support
]

[tool.ruff.lint.per-file-ignores]
# CLI is built with `click` framework
"examples/**" = [
    "INP001", # allow implicit namespace packages in examples dir.
    "T201", # allow `print` in examples.
    "PLC0415", # allow imports in all places.
]
"src/gendalf/cli.py" = [
    "FBT001", # CLI commands can use non keyword flag options
    "PLR0913", # CLI commands can use a lots of arguments and options
]
"tests/**" = [
    "PLR0913", # test functions can use a lots of arguments and fixtures
]


[tool.mypy]
mypy_path = ["src", "examples/my_greeter/generated", "examples/my_greeter/src"]
files = ["examples/my_greeter", "src", "tests"]
explicit_package_bases = true
strict = true
disallow_any_unimported = true
disallow_any_expr = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
strict_equality = true
strict_optional = true
enable_error_code = [
    "redundant-self",
    "redundant-expr",
    "possibly-undefined",
    "truthy-bool",
    "truthy-iterable",
    "ignore-without-code",
    "unused-awaitable",
    "explicit-override",
    "mutable-override",
    "unimported-reveal",
    "narrowed-type-not-subtype",
]

# NOTE: in some modules it's hard to disallow `typing.Any` completely, so allow it (e.g. `click` has `typing.Any` in
# some decorators).
[[tool.mypy.overrides]]
module = [
    "gendalf.cli",
    "gendalf.entrypoint.inspection",
    "gendalf.generator.dto.type_inspection.visitor.trait",
]
disallow_any_expr = false

# NOTE: allow return `typing.Any` in test fixtures (e.g. mock objects created with `create_autospec`)
[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_any_expr = false
disallow_any_explicit = false
warn_return_any = false

# NOTE: simplify typings, e.g. avoid `if TYPE_CHECKING` statements to keep code more clear.
[[tool.mypy.overrides]]
module = [
    "my_service.*",
]
disable_error_code = [
    "explicit-override",
]

# NOTE: httpx, fastapi, aiohttp may return `Any`
[[tool.mypy.overrides]]
module = [
    "examples.my_greeter.client",
    "api.fastapi.*",
    "api.aiohttp.*",
]
disallow_any_expr = false
disallow_any_explicit = false

# NOTE: pydantic models are built on top of `BaseModel` which is always contains `Any`
[[tool.mypy.overrides]]
module = [
    "api.fastapi.model",
    "api.aiohttp.model",
]
disallow_any_decorated = false

# NOTE: httpx_ws has mypy issues
[[tool.mypy.overrides]]
module = [
    "api.fastapi.client",
]
disable_error_code = ["var-annotated"]

# NOTE: aiohttp client has mypy issues
[[tool.mypy.overrides]]
module = [
    "api.aiohttp.client",
]
disable_error_code = ["unreachable"]

[tool.pytest.ini_options]
pythonpath = ["src", "examples/my_greeter/generated", "examples/my_greeter/src"]
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
]
testpaths = [
    "tests",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abc.abstractmethod",
    "if __name__ == .__main__.:",
    "if t.TYPE_CHECKING:",
]
show_missing = true
